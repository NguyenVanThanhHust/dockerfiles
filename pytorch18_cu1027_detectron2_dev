from pytorch/pytorch:1.8.1-cuda10.2-cudnn7-devel
RUN pip install opencv-python einops matplotlib jpeg4py \
        tqdm timm pyyaml yacs easydict tensorboardX
RUN apt-get update && apt-get -y install libgl1
RUN apt-get update -y && apt install -y build-essential
RUN apt-get install -y libglib2.0-0
RUN python -m pip install facenet_pytorch
RUN python -m pip install scipy Pillow
RUN python -m pip install pandas
RUN apt-get update -y && apt-get install -y libglib2.0-0 git vim fish
RUN mkdir git_intstalled_lib
WORKDIR /workspace/git_intstalled_lib
RUN pip install git+https://github.com/microsoft/ComputerVision.git@master#egg=utils_cv
RUN python -m pip install decord scikit-image seaborn scipy
RUN python -m pip install 'git+https://github.com/facebookresearch/detectron2.git'
WORKDIR /workspace/git_intstalled_lib/
RUN git clone --depth 1 https://gitlab.kitware.com/cmake/cmake.git
RUN apt-get install -y libssl-dev
WORKDIR /workspace/git_intstalled_lib/cmake/
RUN ./bootstrap --parallel=8 && make -j8 && make install
RUN python -m pip install pytorch-lightning

WORKDIR /workspace/git_intstalled_lib
RUN git clone https://github.com/open-mmlab/mmcv.git
RUN git clone https://github.com/open-mmlab/mmdetection.git
WORKDIR /workspace/git_intstalled_lib/mmcv
RUN git checkout -b v1.3.8 && python setup.py develop
WORKDIR /workspace/git_intstalled_lib/mmdetection
RUN git checkout -b v2.15.0 && python setup.py develop


# WORKDIR /workspace/git_intstalled_lib
# RUN git clone https://github.com/opencv/opencv.git -b 4.5.2
# RUN git clone https://github.com/opencv/opencv_contrib.git -b 4.5.2
# RUN git clone https://github.com/FFmpeg/FFmpeg.git -b release/4.4 ffmpeg/

# RUN apt-get install -y --reinstall ca-certificates libssl-dev wget

# RUN git clone https://git.videolan.org/git/ffmpeg/nv-codec-headers.git 
# RUN wget https://boostorg.jfrog.io/artifactory/main/release/1.78.0/source/boost_1_78_0.tar.bz2 && tar -xvf boost_1_78_0.tar.bz2
# WORKDIR /workspace/git_intstalled_lib/boost_1_78_0/
# RUN apt-get -y update && apt-get install -y build-essential g++ python-dev autotools-dev libicu-dev libbz2-dev
# RUN ./bootstrap.sh --prefix=/usr/local/
# RUN ./b2 -j8 variant=release link=shared threading=multi runtime-link=shared
# RUN ./b2 -j8 install

# #  Install pkg config to find ffmpeg
# RUN apt-get update -qq  && apt-get install -y autoconf \
#     automake \
#     build-essential \
#     git-core \
#     libass-dev \
#     libfreetype6-dev \
#     libgnutls28-dev \
#     libmp3lame-dev \
#     libsdl2-dev \
#     libtool \
#     libva-dev \
#     libvdpau-dev \
#     libvorbis-dev \
#     libxcb1-dev \
#     libxcb-shm0-dev \
#     libxcb-xfixes0-dev \
#     meson \
#     ninja-build \
#     pkg-config \
#     texinfo \
#     wget \
#     yasm \
#     zlib1g-dev

# # This part is for ffmpeg
# RUN apt-get install -y libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libavresample-dev libavdevice-dev ffmpeg

# ARG LIB_PREFIX='/usr/local'
# ENV CXXFLAGS="-D__STDC_CONSTANT_MACROS"
# ENV LIB_PREFIX=${LIB_PREFIX} \
#     FFMPEG_PATH='/usr/bin/ffmpeg'

# RUN echo $(ffmpeg -version)

# RUN apt-get update && apt-get install -y libgtk-3-dev
# RUN apt-get update && apt-get install -y vim

# RUN mkdir -p /workspace/git_intstalled_lib/opencv/build/
# WORKDIR /workspace/git_intstalled_lib/opencv/build/

# RUN opencv_cmake_flags=" \
#     -D BUILD_opencv_java=OFF \
#     -D BUILD_opencv_python=0 \
#     -D BUILD_opencv_python2=0 \
#     -D BUILD_opencv_python3=0 \
#     -D WITH_FFMPEG=ON \
#     -D BUILD_DOCS=OFF \
#     -D BUILD_TESTS=OFF \
#     -D BUILD_PERF_TESTS=OFF \
#     -D BUILD_JAVA=OFF \
#     -D BUILD_opencv_apps=OFF \
#     -D BUILD_opencv_aruco=OFF \
#     -D BUILD_opencv_bgsegm=OFF \
#     -D BUILD_opencv_bioinspired=OFF \
#     -D BUILD_opencv_ccalib=OFF \
#     -D BUILD_opencv_datasets=OFF \
#     -D BUILD_opencv_dnn_objdetect=OFF \
#     -D BUILD_opencv_dpm=OFF \
#     -D BUILD_opencv_fuzzy=OFF \
#     -D BUILD_opencv_hfs=OFF \
#     -D BUILD_opencv_java_bindings_generator=OFF \
#     -D BUILD_opencv_js=OFF \
#     -D BUILD_opencv_img_hash=OFF \
#     -D BUILD_opencv_line_descriptor=OFF \
#     -D BUILD_opencv_optflow=OFF \
#     -D BUILD_opencv_phase_unwrapping=OFF \
#     -D BUILD_opencv_python3=OFF \
#     -D BUILD_opencv_python_bindings_generator=OFF \
#     -D BUILD_opencv_reg=OFF \
#     -D BUILD_opencv_rgbd=OFF \
#     -D BUILD_opencv_saliency=OFF \
#     -D BUILD_opencv_shape=OFF \
#     -D BUILD_opencv_stereo=OFF \
#     -D BUILD_opencv_stitching=OFF \
#     -D BUILD_opencv_structured_light=OFF \
#     -D BUILD_opencv_superres=OFF \
#     -D BUILD_opencv_surface_matching=OFF \
#     -D BUILD_opencv_ts=OFF \
#     -D BUILD_opencv_xobjdetect=OFF \
#     -D BUILD_opencv_xphoto=OFF \
#     -D BUILD_opencv_dnn=OFF \
#     -D BUILD_opencv_stitching=OFF \
#     -D WITH_VTK=OFF \
#     -D WITH_QT=ON \
#     -D WITH_GTK=ON \
#     -D WITH_CUDNN=OFF \
#     -D WITH_CUBLAS=0 \
#     -D WITH_OPENCL=OFF \
#     -D WITH_CUDA=OFF \
#     -D CMAKE_INSTALL_PREFIX=$LIB_PREFIX \
#     -D CMAKE_BUILD_TYPE=RELEASE \    
# " && cmake $opencv_cmake_flag ..       

# RUN make -j2 && make install 

# WORKDIR /workspace/git_intstalled_lib/

# ADD nv-tensorrt-repo-ubuntu1804-cuda10.2-trt6.0.1.8-ga-20191108_1-1_amd64.deb .
# RUN dpkg -i nv-tensorrt-repo-ubuntu1804-cuda10.2-trt6.0.1.8-ga-20191108_1-1_amd64.deb
# RUN apt-get install -y libnvinfer6 libnvonnxparsers6 libnvparsers6 libnvinfer-plugin6
# RUN apt-key add  /var/nv-tensorrt-repo-cuda10.2-trt6.0.1.8-ga-20191108/7fa2af80.pub
# RUN apt-get update
# RUN wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb
# RUN apt install ./nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb
# RUN wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/libnvinfer6_6.0.1-1+cuda10.2_amd64.deb
# RUN apt install ./libnvinfer6_6.0.1-1+cuda10.2_amd64.deb

# RUN apt-get install -y  libnvonnxparsers-dev libnvparsers-dev libnvinfer-plugin-dev

WORKDIR /workspace/

# https://docs.nvidia.com/deeplearning/tensorrt/install-guide/index.html#installing
# https://developer.nvidia.com/nvidia-tensorrt-6x-download
# https://github.com/NVIDIA/TensorRT
# https://developer.nvidia.com/blog/speeding-up-deep-learning-inference-using-tensorrt/
# https://docs.nvidia.com/deeplearning/tensorrt/
# https://docs.nvidia.com/deeplearning/tensorrt/sample-support-guide/index.html