FROM pytorch/pytorch:1.8.1-cuda11.1-cudnn8-devel
RUN rm /etc/apt/sources.list.d/cuda.list
RUN rm /etc/apt/sources.list.d/nvidia-ml.list
RUN apt-key del 7fa2af80

RUN cat /etc/lsb-release
RUN apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub

ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get -y install build-essential \
    libssl-dev libgl1 libglib2.0-0 git vim fish
RUN apt-get update && apt-get -y install \  
    libmagickwand-dev libsm6 libxext6 libboost-all-dev \
    software-properties-common libgtk2.0-dev

RUN pip install opencv-python einops matplotlib jpeg4py \
        tqdm timm pyyaml yacs easydict tensorboardX scipy \
        Pillow pandas decord scikit-image seaborn \
        pytorch-lightning pybind11 albumentations
        
RUN pip install ffmpeg onnx onnx-simplifier pytorch_lightning \
        opencv-contrib-python\ 
        thop imutils loguru \
        onnxruntime-gpu

RUN apt-get update && \
    add-apt-repository -y ppa:webupd8team/java && \
    apt-get update && apt install -y openjdk-8-jdk zookeeperd net-tools cmake

RUN pip install gym[atari,accept-rom-license]==0.21.0


# This part is for ffmpeg
RUN apt-get install -y libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libavresample-dev libavdevice-dev

RUN apt-get install -y build-essential yasm cmake libtool libc6 libc6-dev unzip wget libnuma1 libnuma-dev

WORKDIR /workspace/

RUN apt-get update && apt-get install -y --no-install-recommends \
    autoconf `# libnice` \
    automake `# libnice` \
    bison \
    build-essential \
    ca-certificates \
    flex \
    gettext \
    git \
    gnutls-dev `# libnice` \
    gtk-doc-tools `# libnice` \
    libffi-dev \
    libglib2.0 \
    libnice-dev \
    libopus-dev \
    libpcre3-dev \
    libsrtp-dev \
    libssl-dev `# needed for DTLS requirement`\
    libtool `# libnice` \
    libvpx-dev \
    libx264-dev \
    mount \
    perl \
    python \
    wget \
    zlib1g

    
# ARG USERNAME=thanhnv
# ARG USER_UID=1000
# ARG USER_GID=$USER_UID
# 
# # Create the user
# RUN groupadd --gid $USER_GID $USERNAME \
#     && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
#     #
#     # [Optional] Add sudo support. Omit if you don't need to install software after connecting.
#     && apt-get update \
#     && apt-get install -y sudo \
#     && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
#     && chmod 0440 /etc/sudoers.d/$USERNAME
# 
# # ********************************************************
# # * Anything else you want to do like clean up goes here *
# # ********************************************************
# 
# # [Optional] Set the default user. Omit if you want to keep the default as root.
# USER $USERNAME
